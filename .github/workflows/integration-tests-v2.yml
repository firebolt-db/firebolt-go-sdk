name: Integration tests V2

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      FIREBOLT_CLIENT_ID_STG_NEW_IDN:
        required: false
      FIREBOLT_CLIENT_SECRET_STG_NEW_IDN:
        required: false

jobs:
  resolve-go-version:
    runs-on: ubuntu-latest
    outputs:
      latest_go: ${{ steps.get-go-version.outputs.latest_go }}
    steps:
      - id: get-go-version
        run: |
          latest_version=$(curl -s https://go.dev/dl/?mode=json | jq -r '.[] | select(.stable == true) | .version' | head -n1)
          latest_go=${latest_version#go}
          echo "::set-output name=latest_go::$latest_go"

  integration-tests:
    needs: resolve-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.resolve-go-version.outputs.latest_go }}
          check-latest: true

      - name: Setup database and engine
        id: setup
        uses: firebolt-db/integration-testing-setup@v2
        with:
          firebolt-client-id: ${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}
          firebolt-client-secret: ${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN}}
          api-endpoint: "api.staging.firebolt.io"
          account: ${{ vars.FIREBOLT_ACCOUNT }}

      - name: Run integration tests
        env:
          DATABASE_NAME: ${{ steps.setup.outputs.database_name }}
          ENGINE_NAME: ${{ steps.setup.outputs.engine_name }}
          FIREBOLT_ENDPOINT: "api.staging.firebolt.io"
          ACCOUNT_NAME: ${{ vars.FIREBOLT_ACCOUNT }}
          CLIENT_ID: ${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}
          CLIENT_SECRET: ${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}
          LONG_TEST_VALUE: ${{ vars.LONG_TEST_VALUE }}
        run: |
          go test ./... -timeout=30m -v --tags=integration
