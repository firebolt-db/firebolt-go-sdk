name: Core integration tests

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'The docker image tag for the firebolt core'
        required: false
        type: string
      os_name:
        description: 'The operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
  workflow_call:
    inputs:
      tag_version:
        description: 'The docker image tag for the firebolt core'
        required: false
        type: string
      os_name:
        description: 'Operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
env:
  DEFAULT_IMAGE_TAG: ${{ vars.DEFAULT_CORE_IMAGE_TAG }}
jobs:
  resolve-go-version:
    runs-on: ubuntu-latest
    outputs:
      latest_go: ${{ steps.get-go-version.outputs.latest_go }}
    steps:
      - id: get-go-version
        run: |
          latest_version=$(curl -s https://go.dev/dl/?mode=json | jq -r '.[] | select(.stable == true) | .version' | head -n1)
          latest_go=${latest_version#go}
          echo "::set-output name=latest_go::$latest_go"
  integration-tests:
    needs: resolve-go-version
    runs-on: ${{ inputs.os_name }}
    env:
      DOCKER_COMPOSE_FILE: ${{ github.workspace }}/.github/workflows/core/docker-compose.yaml
      SERVICE_PORT: 3473
      SERVICE_URL: http://localhost:3473
      MAX_RETRIES: 30
      RETRY_INTERVAL: 2
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.resolve-go-version.outputs.latest_go }}
          check-latest: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Write certificate and certificate key to file
        run: |
          mkdir "${{ github.workspace }}/.github/workflows/core/certs"
          echo "${{ secrets.FIREBOLT_CORE_DEV_CERT_PRIVATE_KEY }}" > ${{ github.workspace }}/.github/workflows/core/certs/localhost-key.pem
          echo "${{ secrets.FIREBOLT_CORE_DEV_CERT }}" > ${{ github.workspace }}/.github/workflows/core/certs/localhost.pem

      - name: Trust self-signed cert
        run: |
          sudo cp "${{ github.workspace }}/.github/workflows/core/certs/localhost.pem" /usr/local/share/ca-certificates/localhost.crt
          sudo update-ca-certificates

      # if no image tag was passed in, then use the image tag from the defaults
      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG="${{ inputs.tag_version }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="$DEFAULT_IMAGE_TAG"
          fi
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Prepare docker-compose.yml
        run: |
          if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
            echo "Error: Docker compose file not found at $DOCKER_COMPOSE_FILE"
            exit 1
          fi
          sed -i "s|\${IMAGE_TAG}|${{ steps.set-tag.outputs.tag }}|g" "$DOCKER_COMPOSE_FILE"
          sed -i "s|\${BASE_DIR}|${{ github.workspace }}|g" "$DOCKER_COMPOSE_FILE"
          echo "Docker compose file prepared:"
          cat "$DOCKER_COMPOSE_FILE"

      - name: Start service container
        run: |
          docker compose -f "$DOCKER_COMPOSE_FILE" up -d
          docker compose -f "$DOCKER_COMPOSE_FILE" ps

      - name: Wait for service to be ready
        run: |
          for i in $(seq 1 $MAX_RETRIES); do
            if curl --silent --fail "$SERVICE_URL" --data-binary "SELECT 1" | grep -q "1"; then
              echo "Service is up and responding!"
              exit 0
            fi
            echo "Waiting for service... ($i/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done
          echo "Error: Service failed to start within timeout"
          docker compose -f "$DOCKER_COMPOSE_FILE" logs
          exit 1

      - name: Run integration tests
        run: go test ./... -timeout=30m -v --tags=integration_core

      - name: Stop container
        if: always()
        run: |
          docker compose -f "$DOCKER_COMPOSE_FILE" down